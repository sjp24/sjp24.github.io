<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SJP</title>
  
  
  <link href="http://sjp24.github.io/atom.xml" rel="self"/>
  
  <link href="http://sjp24.github.io/"/>
  <updated>2021-12-23T12:17:53.044Z</updated>
  <id>http://sjp24.github.io/</id>
  
  <author>
    <name>Song Park</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Google Colab 101: Python-R 같이 사용하기</title>
    <link href="http://sjp24.github.io/2021/08/26/colab-r-and-python/"/>
    <id>http://sjp24.github.io/2021/08/26/colab-r-and-python/</id>
    <published>2021-08-25T15:00:00.000Z</published>
    <updated>2021-12-23T12:17:53.044Z</updated>
    
    <content type="html"><![CDATA[<p>한 노트북 안에서 여러 언어를 사용하는걸 지양해야 하지만, R와 파이썬을 둘 다 쓰는 사람이라면 두 언어를 동시에 사용할 수 있었으면 하는 순간들이 오기 마련입니다. 기본적으로 Colab 노트북은 Python 언어 기반이지만 (R 노트북도 쓸 수 있긴 하다) 한 노트북 안에서 Python과 R을 같이 쓸 수 있습니다!</p><span id="more"></span><p>(TIP: 그냥 Colab R 노트북 사용하고 싶은 경우 이 링크로 Colab 접속하면 R 노트북이 생성됩니다: <a href="https://colab.research.google.com/#create=true&amp;language=r">https://colab.research.google.com/#create=true&amp;language=r</a>)<br><br/></p><hr><br/><h1 id="Colab에서-Python-R-같이-사용하기"><a href="#Colab에서-Python-R-같이-사용하기" class="headerlink" title="Colab에서 Python-R 같이 사용하기"></a>Colab에서 Python-R 같이 사용하기</h1><p>첫번째로, Colab 노트북에서 아래 코드를 실행:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%load_ext rpy2.ipython</span><br></pre></td></tr></table></figure><p>디폴트로는 모든 셀이 Python 셀이지만 R 코드 사용하고 싶은 경우, <strong>cell magic</strong>과 <strong>line magic</strong> 두가지 방법이 있습니다.</p><ul><li><strong>Cell magic</strong>: 셀 전체를 R 코드로 실행 → 셀 첫번째 행에 아래 코드 입력하면 셀의 모든 코드가 R 코드로 실행됩니다<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%%R</span><br></pre></td></tr></table></figure></li><li><strong>Line magic</strong>: 코드 행을 R 코드로 실행 → R 코드 실행할 행에 아래 코드 입력<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%R</span><br></pre></td></tr></table></figure><br/></li></ul><h1 id="Tip-1-Python-R-언어-사이-Dataframe-복사"><a href="#Tip-1-Python-R-언어-사이-Dataframe-복사" class="headerlink" title="Tip #1: Python-R 언어 사이 Dataframe 복사"></a>Tip #1: Python-R 언어 사이 Dataframe 복사</h1><p>R 코드 부분에서 dataframe이 생성되면, 파이썬 코드 부분에서는 해당 dataframe을 사용할 수 없습니다. 그래서 따로 두 언어 다 활용해서 dataframe을 다룰 경우에는 한쪽에서 생성된 dataframe을 다른 쪽에 만들어주는 방법을 사용해야합니다.</p><p><strong>df</strong> 라는 dataframe이 있으면, 꼭 <strong><span class="highlight-text danger">cell magic 이 아닌 line magic</span></strong> 으로 아래 코드를 실행 해주세요.</p><h5 id="Python-→-R"><a href="#Python-→-R" class="headerlink" title="Python → R"></a>Python → R</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%R -i df</span><br></pre></td></tr></table></figure><h5 id="R-→-Python"><a href="#R-→-Python" class="headerlink" title="R → Python"></a>R → Python</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%R -o df</span><br></pre></td></tr></table></figure><h5 id="여러-dataframe을-한번에"><a href="#여러-dataframe을-한번에" class="headerlink" title="여러 dataframe을 한번에"></a>여러 dataframe을 한번에</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python to R</span></span><br><span class="line">%R -i df -i df2</span><br><span class="line"></span><br><span class="line"><span class="comment">#R to Python</span></span><br><span class="line">%R -o df -o df2</span><br></pre></td></tr></table></figure><br/><h2 id="Tip-2-R-Variable을-Python으로-복사"><a href="#Tip-2-R-Variable을-Python으로-복사" class="headerlink" title="Tip #2: R Variable을 Python으로 복사"></a>Tip #2: R Variable을 Python으로 복사</h2><p>Line magic은 헤당 행에 있는 쿠드에 적용이 되다보니 아래 코드와 같은 방법으로 R variable도 Python variable로 복사할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = %R x</span><br></pre></td></tr></table></figure><hr><p>위에 설명한 내용을 간단한 예시로 볼 수 있는 Colab 노트북입니다! → <a href="https://colab.research.google.com/drive/1MKFJ6LyWAMQ6JBewbeuk8sI6ne-jbMN2?usp=sharing" title="Title">Example Colab Notebook</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;한 노트북 안에서 여러 언어를 사용하는걸 지양해야 하지만, R와 파이썬을 둘 다 쓰는 사람이라면 두 언어를 동시에 사용할 수 있었으면 하는 순간들이 오기 마련입니다. 기본적으로 Colab 노트북은 Python 언어 기반이지만 (R 노트북도 쓸 수 있긴 하다) 한 노트북 안에서 Python과 R을 같이 쓸 수 있습니다!&lt;/p&gt;</summary>
    
    
    
    <category term="Guides" scheme="http://sjp24.github.io/categories/Guides/"/>
    
    
    <category term="Colab" scheme="http://sjp24.github.io/tags/Colab/"/>
    
    <category term="R" scheme="http://sjp24.github.io/tags/R/"/>
    
    <category term="Python" scheme="http://sjp24.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>데이터의 흐름: 기본적인 데이터 파이프라인 개념 설명</title>
    <link href="http://sjp24.github.io/2021/06/17/basic-pipeline/"/>
    <id>http://sjp24.github.io/2021/06/17/basic-pipeline/</id>
    <published>2021-06-16T15:00:00.000Z</published>
    <updated>2021-12-23T12:59:32.503Z</updated>
    
    <content type="html"><![CDATA[<p>스타트업계로 오게 된 후로는 데이터 파이프라인이 얼마나 중요한지 뼈저리게 느끼고 있습니다. 데이터베이스 지식, 데이터 파이프라인 지식을 가지고 있는 게 중요하다고 생각해서 전부터 배우려고 노력은 했지만 역시 산전수전 다 직접 겪어봐야 빠르게 성장 할 수 있습니다 😅</p><p>저도 아직 많이 부족하지만, 데이터 외 직군 혹은 데이터를 다루지만 데이터 파이프라인에 대한 지식이 부족한 분들을 위해 아주 기본적인 개념들을 설명하려 합니다.<br/><br/></p><span id="more"></span><hr><br/><h1 id="기본-용어"><a href="#기본-용어" class="headerlink" title="기본 용어"></a>기본 용어</h1><p>비슷하지만 조금씩 다른 파이프라인 관련 용어.</p><p><strong><span class="highlight-text primary">ETL (Extract, Transform, Load)</span></strong>: 데이터를 추출하고(extract) → 변환하여 (transform) → 적재하는 (load) 데이터 웨어하우스 구축 프로세스</p><p><strong><span class="highlight-text primary">ELT (Extract, Load, Transform)</span></strong>: 데이터를 추출하고 (extract) → 적재하고 (load) → 변환하는 (transform) 프로세스</p><p><strong><span class="highlight-text primary">Data Warehouse (DW)</span></strong>: 다양한 소스에서 발생한 데이터를 하나의 통합된 형태로 저장하는 공간. 데이터는 설계된 스키마에 맞게 처리되어 저장된다</p><p><strong><span class="highlight-text primary">Data Lake</span></strong>: 다양한 소스에서 발생한 데이터를 그대로 가져와 저장하는 공간. 데이터 웨어하우스와 달리 정형/반정형/비정형 데이터 등 다양한 형태의 소스 raw 데이터를 통합하지 않고 한 곳에 모은다</p><p><strong><span class="highlight-text primary">Data Mart</span></strong>: 특정 목적 (대체로 팀/부서와 같은 조직 단위)을 위해 만들어진 데이터 웨어하우스. 보통 하나의 데이터 웨어하우스에서 조직 단위별로 여러 데이터 마트가 만들어진다</p><p><strong><span class="highlight-text primary">Data Pipeline</span></strong>: 데이터가 흐르는 모든 과정의 총칭 (생성, 변환, 저장, 등)</p><p><strong><span class="highlight-text primary">RDB (Relational Database)</span></strong>: 2차원 (속성, 값) 형식 테이블들로 구성된 관계형 데이터베이스. “관계형”이란 각 테이블 안에서 속성과 값 사이 관계가 있고 테이블과 테이블 사이에도 관계를 가지고 있다. 가장 일반적인 데이터베이스 타입이고 일반적으로 SQL (Structured Query Language) 언어를 통해 데이터를 조회한다</p><p><strong><span class="highlight-text primary">RDBMS (Relational Database Management System)</span></strong>: 관계형 데이터베이스 관리 (생성, 수정, 등)를 위한 프로그램. 예: MySQL, Oracle, SQL Server, 등등<br><br/></p><hr><br/><h1 id="기본-ETL-과정"><a href="#기본-ETL-과정" class="headerlink" title="기본 ETL 과정"></a>기본 ETL 과정</h1><p>조직마다 설계가 다르고 구체적인 프로세스는 보기보다 훨씬 복잡하지만, 대부분 아래와 같은 ETL 프로세스를 통해 데이터 웨어하우스를 구축합니다.<br/><br/></p><img src="https://lh3.googleusercontent.com/pw/AM-JKLVqEoT9LETZzeAriZQM4cxYp9Kp7t_MEqPIfkBuk69NmxYsyT8p5if6fn64J6k9cy7oneLOBsfFapXrS9upM0nJTxtkiWcXJYWWzpUzAll0FFWNyoDJSvZc2conN164QAaRnKjToZF4jOUofN4SOMDrhw=w2133-h779-no?authuser=0" class="fig-100"><p><strong><span class="highlight-text primary">Extract.</span></strong> 다양한 곳에서 생성된 데이터를 추출하는 단계. 조직마다 소스들은 다르지만 커머스에서는 가장 기본적으로 아래와 같은 데이터 소스들이 있습니다:</p><ul><li>운영 데이터베이스 → 주문, 상품 데이터와 같은 데이터가 담긴 데이터베이스</li><li>웹/앱 이벤트 데이터</li><li>마케팅 데이터 → 페이스북, 구글, 카카오, 등</li><li>사용하는 다른 서드파티 앱 데이터</li></ul><p><strong><span class="highlight-text primary">Transform.</span></strong> 소스 데이터가 어떤 형태인지에 따라 이 과정은 많이 달라집니다. 간단한 변환은 각 소스의 날짜 컬럼 형식들을 하나의 기준으로 맞추기, 빈값 처리하는 방식 통일하기와 같은 작업이 있고 보통 테이블들을 조인하고 계산된 필드 만드는 변환이 들어갑니다 → 예: members 테이블에 각 멤버의 구매 이력 관련 컬럼 생성 (첫 구매일, 지난 3개월 총 구매액, 등등). 자주 보는 지표들은 summary 테이블로 만들 수 있습니다 → 예: 일별 거래액, 일별 모든 매체의 총 마케팅 비용 합계.</p><p><strong><span class="highlight-text primary">Load.</span></strong> 변환된 데이터를 데이터 웨어하우스에 적재합니다.<br/><br/></p><h1 id="ETL-vs-ELT"><a href="#ETL-vs-ELT" class="headerlink" title="ETL vs ELT"></a>ETL vs ELT</h1><p>ELT은 여러 소스의 데이터를 추출하여 바로 raw 형태로 적재 후 변환합니다. 즉, 데이터 레이크에 일단 모든 소스의 데이터를 담고 변환은 스테이징 필요 없이 데이터 레이크/웨어하우스 안에서 이루어집니다. 최신 클라우드 기반 기술로 인해 ETL에 비해 비교적 새로운 기술이고 뜨고 있는 데이터 처리 방식입니다. 이 과정은 적재가 빠르게 이루어진다는 게 장점이지만 유연한 만큼 데이터 신뢰/정합성은 떨어질 수 있습니다.<br/><br/></p><h1 id="Data-Mart"><a href="#Data-Mart" class="headerlink" title="Data Mart"></a>Data Mart</h1><p>큰 규모의 조직에서는 조직 단위로 특화된 데이터 마트를 설계하고 각 조직에서 봐야 하는 데이터만 볼 수 있게 권한을 관리합니다. 스타트업이나 더 작은 규모의 조직에서는 비교적 팀/부서와 같은 조직 단위 사이 경계가 덜 명확하기 때문에 조직 단위별 마트 없이 하나의 데이터 웨어하우스를 사용하는 방식이 크게 문제 되지 않을 수 있습니다.<br>하지만 전사 조직용 데이터에 비해 데이터 마트에 있는 테이블들은 유연하게 수정/변환 할 수 있기 때문에 빠르게 변하는 스타트업 조직에도 데이터 마트를 잘 활용한다면 효율적으로 분석하고 인사이트 얻을 수 있습니다.<br/><br/></p><img src="https://lh3.googleusercontent.com/pw/AM-JKLWZQJGvtMmoyOtAKl8GJ-UcAjMMDR1OE4I5cBSEOSH4CELDL52kAr6TxDZ6LdNI_0qOWQ57MxPmn5laeXtrZL7Qlw5JcTUXRaehO9wIp53D9RDAX_uX954Fs-Eg-4wvt4N6YMxq6yf7NUcKHgRZgarPsw=w2133-h915-no?authuser=0" class=""><br/>]]></content>
    
    
    <summary type="html">&lt;p&gt;스타트업계로 오게 된 후로는 데이터 파이프라인이 얼마나 중요한지 뼈저리게 느끼고 있습니다. 데이터베이스 지식, 데이터 파이프라인 지식을 가지고 있는 게 중요하다고 생각해서 전부터 배우려고 노력은 했지만 역시 산전수전 다 직접 겪어봐야 빠르게 성장 할 수 있습니다 😅&lt;/p&gt;
&lt;p&gt;저도 아직 많이 부족하지만, 데이터 외 직군 혹은 데이터를 다루지만 데이터 파이프라인에 대한 지식이 부족한 분들을 위해 아주 기본적인 개념들을 설명하려 합니다.&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Guides" scheme="http://sjp24.github.io/categories/Guides/"/>
    
    
    <category term="Data Pipeline" scheme="http://sjp24.github.io/tags/Data-Pipeline/"/>
    
  </entry>
  
</feed>
